{
  "name": "Svg-detailer",
  "tagline": "A native javascript library for annotating images, with results exportable as SVG elements.",
  "body": "# svg-detailer\r\nA native javascript library for annotating images, with results exportable as SVG elements.\r\n\r\n## General description\r\n\r\nThis library provides a basic ability to annotate a base image with SVG elements, using an editing paradigm\r\nsimilar to that of Google Maps Drawing Manager.  The working area and background image for a browser window\r\nare specified through data- elements of a containing &lt;div&gt;.  Invocation of the library causes DOM elements to\r\nbe created in two parts: the &lt;svg&gt; itself within the container &lt;div&gt;, and the menu &lt;div&gt; populated by default\r\nelements as well as data- elements specifying what shape types are to be available.  The image is initially\r\npresented at its minimal full extent within the containing &lt;div&gt;, scaled according to aspect ratio and pixel\r\nextent to fit the working area description.  Dynamic zooming through mouse gestures is continuously available\r\nwhen the mouse is within the working area.  When the drawing mode is effectively idle in \"MOVE\", dragging any\r\npoint repositions the base image within the working area.\r\n\r\nCurrently, the SVG element types supported are: text, polyline, polygon, line, rectangle, circle, and ellipse, as\r\nwell as pseudo-functions \"arrow\", quadratic and cubic Bezier curves, and \"draw\" freehand sketch.  \"Draw\" is actually\r\nrealized as a polyline, rather than the SVG element &lt;path&gt;.  Additionally, the quadratic and cubic curves are\r\nrealized as degenerate cases of &lt;path&gt;.  For purposes of element organization and editing convenience, group, &lt;g&gt;,\r\nelements are used to contain graphic elements\r\n\r\nPresent limitations exist for element details, where only the \"stroke\" color attribute is controllable.  Other\r\nstyling attributes such as \"fill\", \"stroke-opacity\", \"fill-opacity\", and \"stroke-width\" are fixed at this time.\r\nWhen a suitable editing framework is developed, these attributes will be changeable within the library's context.\r\n\r\nElement editing is currently continuously active, effected through mouse events.\r\n\r\n## User interface description\r\n\r\nSVG elements are created by selecting an element type from the button menu and clicking on the working image area.\r\nSome variation in mouse down vs click and double-click exists on an element-type basis:\r\n   * A &lt;line&gt; is created by clicking the first point, and dragging to the end point, terminating on mouse up.  This\r\n     paradigm is shared by &lt;rect&gt;angle, &lt;circle&gt;, &lt;ellipse&gt;, \"draw\", and \"arrow\".\r\n   * &lt;polyline&gt; and &lt;polygon&gt; use a \"tethered\" paradigm where each mouse click registers a new point,\r\n     terminated by double-click or \"Enter\"/\"Return\".\r\n   * &lt;text&gt; elements are created by clicking to specify the baseline point and then typing on the keyboard.  Either\r\n     the native key input handler can be used, or the Mousetrap library can be used, although the latter has not had\r\n     any testing since the dependency was removed.  Text input is terminated by shift-Enter.\r\n\r\nEditing is enabled through mouseover events on the &lt;g&gt; groups containing elements. Similarly to map drawing element\r\nediting, \"bubbles\" appear at control points appropriate to the given element. On mouse down on these bubbles,\r\ndragging the point relocates it for the element.  Due to the definition of rectangle, circle, ellipse, and text,\r\nmoving their base-point effectively relocates the element.  The other line-  or poly- based elements have only\r\nindividually controllable points currently, although functions to move the element as a whole are in the works.\r\nPolyline, polygon, and \"draw\" elements have \"insertion\" points depicted at the midpoint of each segment to allow\r\nrefinement of the shape.  Each such insertion offers new insertion points, none of which persist unless used.\r\n\r\n### Hot keys:\r\n\r\nAs mentioned earlier, the \"Return\" or \"Enter\" key functions as a double-click (except fot text, where it is CR/LF,\r\nand shift-Enter is used for element completion).  \"Escape\" is used to undo the current point being created.\r\nPolylines and polygons benefit most from this feature, in that the entire element can be backtracked to nothing. The\r\nintention is to extend this to points being edited as well.  Shift-Delete is used to remove the highlighted element\r\ncompletely.  Control-B and control-T are used to change the layer position of the highlighted element to the\r\n\"bottom\" or \"top\" of the element stack, respectively.  These functions are useful since \"later\" elements can\r\neclipse previous elements, making them inaccessible to editing.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}